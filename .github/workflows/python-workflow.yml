# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test & Deploy Python Application

on: push
permissions:
  contents: read
jobs:
  test:
    env:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_PORT: 5432
      POSTGRES_DB: testdb
      POSTGRES_SERVER: localhost
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names, ignore pydantic pattern (F722)
        flake8 . --count --ignore=F722 --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        echo "$POSTGRES_PORT"
        pytest -v
  deploy-docker-image:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Extract Version
        id: version_step
        run: |
          echo "##[set-output name=version;]VERSION=${GITHUB_REF#$"refs/tags/v"}"
          echo "##[set-output name=version_tag;]${{ secrets.DOCKERHUB_USERNAME }}/the-bargain-hand-be:${GITHUB_REF#$"refs/tags/v"}"
          echo "##[set-output name=latest_tag;]${{ secrets.DOCKERHUB_USERNAME }}/the-bargain-hand-be:latest"
      - name: Print Version
        run: |
          echo ${{steps.version_step.outputs.version_tag}}
          echo ${{steps.version_step.outputs.latest_tag}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: PrepareReg Names
        id: read-docker-image-identifiers
        run: |
          echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo LATEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      - name: Build and push image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.VERSION_TAG }}
            ${{ env.LATEST_TAG }}
          build-args: |
            ${{ steps.version_step.outputs.version }}
          platforms: linux/amd64,linux/arm64
